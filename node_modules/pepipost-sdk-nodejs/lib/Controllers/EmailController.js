/**
 * PepipostAPIV10Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 08/20/2016
 */

var _request = require('../Http/Client/RequestClient'),
    _configuration = require('../configuration'),
    _APIHelper = require('../APIHelper');

var EmailController = {

    /**
     * `Sending Mails` – This API is used for sending emails. Pepipost supports REST as well JSON formats for the input
     * @param {string} apiKey    Required parameter: Your API Key
     * @param {string} content    Required parameter: Email body in html (to use attributes to display dynamic values such as name, account number, etc. for ex. [% NAME %] for ATT_NAME , [% AGE %] for ATT_AGE etc.)
     * @param {string} from    Required parameter: From email address
     * @param {string} recipients    Required parameter: Email addresses for recipients (multiple values allowed)
     * @param {string} subject    Required parameter: Subject of the Email
     * @param {string|null} aTTNAME    Optional parameter: Specify attributes followed by ATT_ for recipient to personalized email for ex. ATT_NAME for name, ATT_AGE for age etc. (Multiple attributes are allowed)
     * @param {string|null} attachmentid    Optional parameter: specify uploaded attachments id (Multiple attachments are allowed)
     * @param {string|null} bcc    Optional parameter: Email address for bcc
     * @param {bool|null} clicktrack    Optional parameter: set ‘0’ or ‘1’ in-order to disable or enable the click-track
     * @param {bool|null} footer    Optional parameter: Set '0' or '1' in order to include footer or not
     * @param {string|null} fromname    Optional parameter: Email Sender name
     * @param {bool|null} opentrack    Optional parameter: set open-track value to ‘0’ or ‘1’ in-order to disable or enable
     * @param {string|null} replytoid    Optional parameter: Reply to email address
     * @param {string|null} tags    Optional parameter: To relate each message. Useful for reports.
     * @param {int|null} template    Optional parameter: Email template ID
     * @param {string|null} xAPIHEADER    Optional parameter: Your defined unique identifier
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {mixed}
     */
    getApiWebSendRest : function(apiKey, content, from, recipients, subject, aTTNAME, attachmentid, bcc, clicktrack, footer, fromname, opentrack, replytoid, tags, template, xAPIHEADER, callback){
        //Assign default values
        clicktrack = clicktrack || true;
        footer = footer || true;
        opentrack = opentrack || true;

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/api/web.send.rest";
        
        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "api_key" : apiKey,
            "content" : content,
            "from" : from,
            "recipients" : recipients,
            "subject" : subject,
            "ATT_NAME" : aTTNAME,
            "attachmentid" : attachmentid,
            "bcc" : bcc,
            "clicktrack" : (null != clicktrack)? clicktrack: true,
            "footer" : (null != footer)? footer: true,
            "fromname" : fromname,
            "opentrack" : (null != opentrack)? opentrack: true,
            "replytoid" : replytoid,
            "tags" : tags,
            "template" : template,
            "X-APIHEADER" : xAPIHEADER
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept" : "application/json"
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb(_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                callback(null,parsed,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse:_response.body},null,_context);
            }
        }
        _request(_options, cb);
    },


    /**
     * `Sending Mails` – This API is used for sending emails. Pepipost supports REST as well JSON formats for the input. This is JSON API.
     * @param {Emailv1} data    Required parameter: Data in JSON format
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {mixed}
     */
    //createApiWebSendJson : function(data, callback){
    send : function(data, callback){
        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/api/web.send.json";
        
        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept" : "application/json",
            "content-type" : "application/json; charset=utf-8"
        };

        //Remove null values
        _APIHelper.cleanObject(data);

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "POST",
            headers: _headers,
            body : _APIHelper.jsonSerialize(data),
        };
        
        //Build the response processing. 
        function cb(_error, _response, _context) {
            if(_error) {
                callback({errorMessage: _error.message, errorCode: _error.code},null,_context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                callback(null,parsed,_context);
            } else {
                callback({errorMessage: "HTTP Response Not OK", errorCode: _response.statusCode, errorResponse:_response.body},null,_context);
            }
        }
        _request(_options, cb);
    }

};

module.exports = EmailController;